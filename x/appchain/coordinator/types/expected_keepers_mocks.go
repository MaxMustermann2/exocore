// Code generated by MockGen. DO NOT EDIT.
// Source: x/appchain/coordinator/types/expected_keepers.go
//
// Generated by this command:
//
//	mockgen -source=x/appchain/coordinator/types/expected_keepers.go -destination=x/appchain/coordinator/types/expected_keepers_mocks.go -package=types
//

// Package types is a generated GoMock package.
package types

import (
	reflect "reflect"
	time "time"

	keys "github.com/ExocoreNetwork/exocore/types/keys"
	types "github.com/ExocoreNetwork/exocore/x/avs/types"
	types0 "github.com/ExocoreNetwork/exocore/x/epochs/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	types2 "github.com/cosmos/cosmos-sdk/x/staking/types"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockAVSKeeper is a mock of AVSKeeper interface.
type MockAVSKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAVSKeeperMockRecorder
}

// MockAVSKeeperMockRecorder is the mock recorder for MockAVSKeeper.
type MockAVSKeeperMockRecorder struct {
	mock *MockAVSKeeper
}

// NewMockAVSKeeper creates a new mock instance.
func NewMockAVSKeeper(ctrl *gomock.Controller) *MockAVSKeeper {
	mock := &MockAVSKeeper{ctrl: ctrl}
	mock.recorder = &MockAVSKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAVSKeeper) EXPECT() *MockAVSKeeperMockRecorder {
	return m.recorder
}

// DeleteAVSInfo mocks base method.
func (m *MockAVSKeeper) DeleteAVSInfo(arg0 types1.Context, arg1 common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAVSInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAVSInfo indicates an expected call of DeleteAVSInfo.
func (mr *MockAVSKeeperMockRecorder) DeleteAVSInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAVSInfo", reflect.TypeOf((*MockAVSKeeper)(nil).DeleteAVSInfo), arg0, arg1)
}

// GetEpochEndChainIDs mocks base method.
func (m *MockAVSKeeper) GetEpochEndChainIDs(arg0 types1.Context, arg1 string, arg2 int64) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpochEndChainIDs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetEpochEndChainIDs indicates an expected call of GetEpochEndChainIDs.
func (mr *MockAVSKeeperMockRecorder) GetEpochEndChainIDs(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpochEndChainIDs", reflect.TypeOf((*MockAVSKeeper)(nil).GetEpochEndChainIDs), arg0, arg1, arg2)
}

// IsAVSByChainID mocks base method.
func (m *MockAVSKeeper) IsAVSByChainID(arg0 types1.Context, arg1 string) (bool, common.Address) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAVSByChainID", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(common.Address)
	return ret0, ret1
}

// IsAVSByChainID indicates an expected call of IsAVSByChainID.
func (mr *MockAVSKeeperMockRecorder) IsAVSByChainID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAVSByChainID", reflect.TypeOf((*MockAVSKeeper)(nil).IsAVSByChainID), arg0, arg1)
}

// RegisterAVSWithChainID mocks base method.
func (m *MockAVSKeeper) RegisterAVSWithChainID(arg0 types1.Context, arg1 *types.AVSRegisterOrDeregisterParams) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAVSWithChainID", arg0, arg1)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAVSWithChainID indicates an expected call of RegisterAVSWithChainID.
func (mr *MockAVSKeeperMockRecorder) RegisterAVSWithChainID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAVSWithChainID", reflect.TypeOf((*MockAVSKeeper)(nil).RegisterAVSWithChainID), arg0, arg1)
}

// MockEpochsKeeper is a mock of EpochsKeeper interface.
type MockEpochsKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockEpochsKeeperMockRecorder
}

// MockEpochsKeeperMockRecorder is the mock recorder for MockEpochsKeeper.
type MockEpochsKeeperMockRecorder struct {
	mock *MockEpochsKeeper
}

// NewMockEpochsKeeper creates a new mock instance.
func NewMockEpochsKeeper(ctrl *gomock.Controller) *MockEpochsKeeper {
	mock := &MockEpochsKeeper{ctrl: ctrl}
	mock.recorder = &MockEpochsKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEpochsKeeper) EXPECT() *MockEpochsKeeperMockRecorder {
	return m.recorder
}

// GetEpochInfo mocks base method.
func (m *MockEpochsKeeper) GetEpochInfo(arg0 types1.Context, arg1 string) (types0.EpochInfo, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpochInfo", arg0, arg1)
	ret0, _ := ret[0].(types0.EpochInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetEpochInfo indicates an expected call of GetEpochInfo.
func (mr *MockEpochsKeeperMockRecorder) GetEpochInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpochInfo", reflect.TypeOf((*MockEpochsKeeper)(nil).GetEpochInfo), arg0, arg1)
}

// MockStakingKeeper is a mock of StakingKeeper interface.
type MockStakingKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockStakingKeeperMockRecorder
}

// MockStakingKeeperMockRecorder is the mock recorder for MockStakingKeeper.
type MockStakingKeeperMockRecorder struct {
	mock *MockStakingKeeper
}

// NewMockStakingKeeper creates a new mock instance.
func NewMockStakingKeeper(ctrl *gomock.Controller) *MockStakingKeeper {
	mock := &MockStakingKeeper{ctrl: ctrl}
	mock.recorder = &MockStakingKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStakingKeeper) EXPECT() *MockStakingKeeperMockRecorder {
	return m.recorder
}

// UnbondingTime mocks base method.
func (m *MockStakingKeeper) UnbondingTime(arg0 types1.Context) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbondingTime", arg0)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// UnbondingTime indicates an expected call of UnbondingTime.
func (mr *MockStakingKeeperMockRecorder) UnbondingTime(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbondingTime", reflect.TypeOf((*MockStakingKeeper)(nil).UnbondingTime), arg0)
}

// MockOperatorKeeper is a mock of OperatorKeeper interface.
type MockOperatorKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorKeeperMockRecorder
}

// MockOperatorKeeperMockRecorder is the mock recorder for MockOperatorKeeper.
type MockOperatorKeeperMockRecorder struct {
	mock *MockOperatorKeeper
}

// NewMockOperatorKeeper creates a new mock instance.
func NewMockOperatorKeeper(ctrl *gomock.Controller) *MockOperatorKeeper {
	mock := &MockOperatorKeeper{ctrl: ctrl}
	mock.recorder = &MockOperatorKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperatorKeeper) EXPECT() *MockOperatorKeeperMockRecorder {
	return m.recorder
}

// ApplySlashForHeight mocks base method.
func (m *MockOperatorKeeper) ApplySlashForHeight(ctx types1.Context, operatorAccAddress types1.AccAddress, avsAddress string, height uint64, fraction types1.Dec, infraction types2.Infraction, jailDuration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplySlashForHeight", ctx, operatorAccAddress, avsAddress, height, fraction, infraction, jailDuration)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplySlashForHeight indicates an expected call of ApplySlashForHeight.
func (mr *MockOperatorKeeperMockRecorder) ApplySlashForHeight(ctx, operatorAccAddress, avsAddress, height, fraction, infraction, jailDuration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplySlashForHeight", reflect.TypeOf((*MockOperatorKeeper)(nil).ApplySlashForHeight), ctx, operatorAccAddress, avsAddress, height, fraction, infraction, jailDuration)
}

// DeleteOperatorAddressForChainIDAndConsAddr mocks base method.
func (m *MockOperatorKeeper) DeleteOperatorAddressForChainIDAndConsAddr(ctx types1.Context, chainID string, consAddr types1.ConsAddress) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteOperatorAddressForChainIDAndConsAddr", ctx, chainID, consAddr)
}

// DeleteOperatorAddressForChainIDAndConsAddr indicates an expected call of DeleteOperatorAddressForChainIDAndConsAddr.
func (mr *MockOperatorKeeperMockRecorder) DeleteOperatorAddressForChainIDAndConsAddr(ctx, chainID, consAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOperatorAddressForChainIDAndConsAddr", reflect.TypeOf((*MockOperatorKeeper)(nil).DeleteOperatorAddressForChainIDAndConsAddr), ctx, chainID, consAddr)
}

// GetActiveOperatorsForChainID mocks base method.
func (m *MockOperatorKeeper) GetActiveOperatorsForChainID(arg0 types1.Context, arg1 string) ([]types1.AccAddress, []keys.WrappedConsKey) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveOperatorsForChainID", arg0, arg1)
	ret0, _ := ret[0].([]types1.AccAddress)
	ret1, _ := ret[1].([]keys.WrappedConsKey)
	return ret0, ret1
}

// GetActiveOperatorsForChainID indicates an expected call of GetActiveOperatorsForChainID.
func (mr *MockOperatorKeeperMockRecorder) GetActiveOperatorsForChainID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveOperatorsForChainID", reflect.TypeOf((*MockOperatorKeeper)(nil).GetActiveOperatorsForChainID), arg0, arg1)
}

// GetChainIDsForOperator mocks base method.
func (m *MockOperatorKeeper) GetChainIDsForOperator(arg0 types1.Context, arg1 types1.AccAddress) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainIDsForOperator", arg0, arg1)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetChainIDsForOperator indicates an expected call of GetChainIDsForOperator.
func (mr *MockOperatorKeeperMockRecorder) GetChainIDsForOperator(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainIDsForOperator", reflect.TypeOf((*MockOperatorKeeper)(nil).GetChainIDsForOperator), arg0, arg1)
}

// GetOperatorAddressForChainIDAndConsAddr mocks base method.
func (m *MockOperatorKeeper) GetOperatorAddressForChainIDAndConsAddr(arg0 types1.Context, arg1 string, arg2 types1.ConsAddress) (bool, types1.AccAddress) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorAddressForChainIDAndConsAddr", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(types1.AccAddress)
	return ret0, ret1
}

// GetOperatorAddressForChainIDAndConsAddr indicates an expected call of GetOperatorAddressForChainIDAndConsAddr.
func (mr *MockOperatorKeeperMockRecorder) GetOperatorAddressForChainIDAndConsAddr(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorAddressForChainIDAndConsAddr", reflect.TypeOf((*MockOperatorKeeper)(nil).GetOperatorAddressForChainIDAndConsAddr), arg0, arg1, arg2)
}

// GetOperatorConsKeyForChainID mocks base method.
func (m *MockOperatorKeeper) GetOperatorConsKeyForChainID(arg0 types1.Context, arg1 types1.AccAddress, arg2 string) (bool, keys.WrappedConsKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorConsKeyForChainID", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(keys.WrappedConsKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOperatorConsKeyForChainID indicates an expected call of GetOperatorConsKeyForChainID.
func (mr *MockOperatorKeeperMockRecorder) GetOperatorConsKeyForChainID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorConsKeyForChainID", reflect.TypeOf((*MockOperatorKeeper)(nil).GetOperatorConsKeyForChainID), arg0, arg1, arg2)
}

// GetVotePowerForChainID mocks base method.
func (m *MockOperatorKeeper) GetVotePowerForChainID(arg0 types1.Context, arg1 []types1.AccAddress, arg2 string) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVotePowerForChainID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotePowerForChainID indicates an expected call of GetVotePowerForChainID.
func (mr *MockOperatorKeeperMockRecorder) GetVotePowerForChainID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotePowerForChainID", reflect.TypeOf((*MockOperatorKeeper)(nil).GetVotePowerForChainID), arg0, arg1, arg2)
}

// IsOperatorRemovingKeyFromChainID mocks base method.
func (m *MockOperatorKeeper) IsOperatorRemovingKeyFromChainID(arg0 types1.Context, arg1 types1.AccAddress, arg2 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOperatorRemovingKeyFromChainID", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOperatorRemovingKeyFromChainID indicates an expected call of IsOperatorRemovingKeyFromChainID.
func (mr *MockOperatorKeeperMockRecorder) IsOperatorRemovingKeyFromChainID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOperatorRemovingKeyFromChainID", reflect.TypeOf((*MockOperatorKeeper)(nil).IsOperatorRemovingKeyFromChainID), arg0, arg1, arg2)
}

// MockDelegationKeeper is a mock of DelegationKeeper interface.
type MockDelegationKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockDelegationKeeperMockRecorder
}

// MockDelegationKeeperMockRecorder is the mock recorder for MockDelegationKeeper.
type MockDelegationKeeperMockRecorder struct {
	mock *MockDelegationKeeper
}

// NewMockDelegationKeeper creates a new mock instance.
func NewMockDelegationKeeper(ctrl *gomock.Controller) *MockDelegationKeeper {
	mock := &MockDelegationKeeper{ctrl: ctrl}
	mock.recorder = &MockDelegationKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelegationKeeper) EXPECT() *MockDelegationKeeperMockRecorder {
	return m.recorder
}

// DecrementUndelegationHoldCount mocks base method.
func (m *MockDelegationKeeper) DecrementUndelegationHoldCount(arg0 types1.Context, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementUndelegationHoldCount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementUndelegationHoldCount indicates an expected call of DecrementUndelegationHoldCount.
func (mr *MockDelegationKeeperMockRecorder) DecrementUndelegationHoldCount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementUndelegationHoldCount", reflect.TypeOf((*MockDelegationKeeper)(nil).DecrementUndelegationHoldCount), arg0, arg1)
}

// IncrementUndelegationHoldCount mocks base method.
func (m *MockDelegationKeeper) IncrementUndelegationHoldCount(arg0 types1.Context, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementUndelegationHoldCount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementUndelegationHoldCount indicates an expected call of IncrementUndelegationHoldCount.
func (mr *MockDelegationKeeperMockRecorder) IncrementUndelegationHoldCount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementUndelegationHoldCount", reflect.TypeOf((*MockDelegationKeeper)(nil).IncrementUndelegationHoldCount), arg0, arg1)
}
